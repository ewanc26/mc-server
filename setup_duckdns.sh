#!/bin/bash

# DuckDNS Hourly Cron Setup Script
# This script sets up automatic hourly updates for DuckDNS dynamic DNS service

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_error "This script should not be run as root for security reasons."
        print_info "Please run as a regular user. The script will use sudo when needed."
        exit 1
    fi
}

# Function to detect operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt &> /dev/null; then
            OS="Ubuntu/Debian"
        elif command -v yum &> /dev/null; then
            OS="CentOS/RHEL"
        else
            OS="Linux"
        fi
    else
        OS="Unknown"
    fi
}

# Function to check if required commands exist
check_dependencies() {
    local deps=("curl")
    local missing_deps=()
    
    # Check for curl
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    # Check for cron (different on macOS vs Linux)
    if [[ "$OS" == "macOS" ]]; then
        # macOS uses launchd, but crontab should still work
        if ! command -v crontab &> /dev/null; then
            missing_deps+=("crontab")
        fi
    else
        # Linux systems
        if ! command -v crontab &> /dev/null; then
            missing_deps+=("cron")
        fi
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        print_info "Please install them first:"
        case "$OS" in
            "macOS")
                print_info "  macOS: Dependencies should be pre-installed"
                print_info "  If curl is missing: brew install curl"
                ;;
            "Ubuntu/Debian")
                print_info "  Ubuntu/Debian: sudo apt update && sudo apt install curl cron"
                ;;
            "CentOS/RHEL")
                print_info "  CentOS/RHEL: sudo yum install curl cronie"
                ;;
            *)
                print_info "  Please install curl and cron using your system's package manager"
                ;;
        esac
        exit 1
    fi
}

# Function to get user input
get_user_input() {
    print_info "Setting up DuckDNS hourly updates..."
    echo
    
    # Get domain name
    while [[ -z "$DOMAIN" ]]; do
        read -p "Enter your DuckDNS domain (without .duckdns.org): " DOMAIN
        if [[ -z "$DOMAIN" ]]; then
            print_warning "Domain cannot be empty. Please try again."
        fi
    done
    
    # Get token
    while [[ -z "$TOKEN" ]]; do
        read -p "Enter your DuckDNS token: " TOKEN
        if [[ -z "$TOKEN" ]]; then
            print_warning "Token cannot be empty. Please try again."
        fi
    done
    
    # Get IP detection method
    echo
    print_info "Choose IP detection method:"
    echo "1) Auto-detect public IP (recommended)"
    echo "2) Use specific interface IP"
    echo "3) Manual IP specification"
    
    while [[ ! "$IP_METHOD" =~ ^[1-3]$ ]]; do
        read -p "Enter choice (1-3): " IP_METHOD
        if [[ ! "$IP_METHOD" =~ ^[1-3]$ ]]; then
            print_warning "Please enter 1, 2, or 3."
        fi
    done
    
    case $IP_METHOD in
        2)
            read -p "Enter network interface name (e.g., eth0, ens18): " INTERFACE
            ;;
        3)
            read -p "Enter IP address: " MANUAL_IP
            ;;
    esac
}

# Function to create the DuckDNS update script
create_update_script() {
    local script_dir="$HOME/.duckdns"
    local script_path="$script_dir/duck.sh"
    local log_path="$script_dir/duck.log"
    
    # Create directory
    mkdir -p "$script_dir"
    
    # Create the update script
    cat > "$script_path" << 'EOF'
#!/bin/bash

# DuckDNS Update Script
# Auto-generated by DuckDNS setup script

DOMAIN="DOMAIN_PLACEHOLDER"
TOKEN="TOKEN_PLACEHOLDER"
LOG_FILE="LOG_PLACEHOLDER"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Function to get IP address
get_ip_address() {
    IP_METHOD_PLACEHOLDER
}

# Get current IP
CURRENT_IP=$(get_ip_address)

if [[ -z "$CURRENT_IP" ]]; then
    log_message "ERROR: Failed to determine IP address"
    exit 1
fi

# Update DuckDNS
RESPONSE=$(curl -s "https://www.duckdns.org/update?domains=$DOMAIN&token=$TOKEN&ip=$CURRENT_IP")

if [[ "$RESPONSE" == "OK" ]]; then
    log_message "SUCCESS: Updated $DOMAIN.duckdns.org to $CURRENT_IP"
else
    log_message "ERROR: Failed to update DuckDNS. Response: $RESPONSE"
    exit 1
fi
EOF

    # Replace placeholders based on user input
    sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" "$script_path"
    sed -i "s/TOKEN_PLACEHOLDER/$TOKEN/g" "$script_path"
    sed -i "s|LOG_PLACEHOLDER|$log_path|g" "$script_path"
    
    # Insert IP detection method
    case $IP_METHOD in
        1)
            sed -i '/IP_METHOD_PLACEHOLDER/c\
    # Auto-detect public IP\
    curl -s https://ipv4.icanhazip.com/ || curl -s https://api.ipify.org || curl -s https://checkip.amazonaws.com/' "$script_path"
            ;;
        2)
            sed -i "/IP_METHOD_PLACEHOLDER/c\\
    # Get IP from specific interface\\
    ip addr show $INTERFACE | grep 'inet ' | awk '{print \$2}' | cut -d'/' -f1 | head -n1" "$script_path"
            ;;
        3)
            sed -i "/IP_METHOD_PLACEHOLDER/c\\
    # Use manual IP\\
    echo \"$MANUAL_IP\"" "$script_path"
            ;;
    esac
    
    # Make script executable
    chmod +x "$script_path"
    
    print_success "Created DuckDNS update script at $script_path"
    echo "$script_path"
}

# Function to test the update script
test_update_script() {
    local script_path="$1"
    
    print_info "Testing DuckDNS update script..."
    
    if bash "$script_path"; then
        print_success "DuckDNS update test successful!"
        
        # Show log contents
        local log_path="$HOME/.duckdns/duck.log"
        if [[ -f "$log_path" ]]; then
            print_info "Recent log entries:"
            tail -n 3 "$log_path"
        fi
    else
        print_error "DuckDNS update test failed!"
        print_info "Please check your domain and token, then run the script manually:"
        print_info "  $script_path"
        exit 1
    fi
}

# Function to setup cron job
setup_cron() {
    local script_path="$1"
    
    print_info "Setting up hourly cron job..."
    
    # Check if cron job already exists
    if crontab -l 2>/dev/null | grep -q "$script_path"; then
        print_warning "Cron job already exists for this script."
        read -p "Do you want to replace it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping cron setup."
            return
        fi
        
        # Remove existing cron job
        crontab -l 2>/dev/null | grep -v "$script_path" | crontab -
    fi
    
    # Add new cron job (run at minute 0 of every hour)
    (crontab -l 2>/dev/null; echo "0 * * * * $script_path >/dev/null 2>&1") | crontab -
    
    print_success "Hourly cron job added successfully!"
    print_info "DuckDNS will be updated every hour at minute 0."
}

# Function to show status and management commands
show_status() {
    local script_path="$1"
    local log_path="$HOME/.duckdns/duck.log"
    
    echo
    print_success "DuckDNS hourly updates are now configured!"
    echo
    print_info "Management commands:"
    echo "  Test update:     $script_path"
    echo "  View logs:       tail -f $log_path"
    echo "  Edit cron jobs:  crontab -e"
    echo "  List cron jobs:  crontab -l"
    echo
    print_info "Log file location: $log_path"
    
    if [[ -f "$log_path" ]]; then
        echo
        print_info "Current log contents:"
        cat "$log_path"
    fi
}

# Function to show macOS-specific notes
show_macos_notes() {
    if [[ "$OS" == "macOS" ]]; then
        echo
        print_info "macOS Notes:"
        echo "• Cron jobs may require Full Disk Access permission for Terminal/iTerm"
        echo "• Go to System Preferences > Security & Privacy > Privacy > Full Disk Access"
        echo "• Add your terminal application if you encounter permission issues"
        echo "• Alternatively, you can use launchd instead of cron for better macOS integration"
    fi
}

# Main function
main() {
    print_info "DuckDNS Hourly Cron Setup Script"
    echo "=================================="
    echo
    
    # Detect operating system
    detect_os
    print_info "Detected OS: $OS"
    
    # Perform checks
    check_root
    check_dependencies
    
    # Get user input
    get_user_input
    
    # Create update script
    local script_path
    script_path=$(create_update_script)
    
    # Test the script
    test_update_script "$script_path"
    
    # Setup cron job
    setup_cron "$script_path"
    
    # Show status
    show_status "$script_path"
    
    # Show macOS-specific notes if applicable
    show_macos_notes
}

# Run main function
main "$@"
